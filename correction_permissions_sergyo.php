<?php

require_once 'vendor/autoload.php';

// Bootstrap Laravel
$app = require_once 'bootstrap/app.php';
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

use App\Models\User;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

echo "=== SCRIPT DE CORRECTION DES PERMISSIONS - sergyo.vutegha@gmail.com ===\n\n";

$user = User::where('email', 'sergyo.vutegha@gmail.com')->first();

if (!$user) {
    echo "‚ùå Utilisateur non trouv√©.\n";
    exit;
}

echo "üë§ Utilisateur: {$user->name} ({$user->email})\n";
echo "üìä √âtat actuel:\n";
echo "  - R√¥les: " . $user->roles->count() . "\n";
echo "  - Permissions directes: " . $user->permissions->count() . "\n";
echo "  - Statut: " . ($user->is_active ? 'Actif' : 'Inactif') . "\n\n";

// Fonction pour demander confirmation
function askConfirmation($message) {
    echo $message . " (y/N): ";
    $handle = fopen("php://stdin", "r");
    $line = fgets($handle);
    fclose($handle);
    return trim(strtolower($line)) === 'y';
}

// 1. Proposition de nettoyage des permissions
echo "üßπ PROPOSITION DE NETTOYAGE:\n\n";

echo "1. SUPPRIMER TOUTES LES PERMISSIONS DIRECTES (" . $user->permissions->count() . " permissions)\n";
if (askConfirmation("   Proc√©der?")) {
    $user->permissions()->detach();
    echo "   ‚úÖ Permissions directes supprim√©es\n";
} else {
    echo "   ‚è≠Ô∏è Ignor√©\n";
}

echo "\n2. SUPPRIMER TOUS LES R√îLES EXISTANTS (" . $user->roles->count() . " r√¥les)\n";
if (askConfirmation("   Proc√©der?")) {
    $user->roles()->detach();
    echo "   ‚úÖ R√¥les supprim√©s\n";
} else {
    echo "   ‚è≠Ô∏è Ignor√©\n";
}

// 2. Proposition de nouveaux r√¥les appropri√©s
echo "\nüé≠ ATTRIBUTION D'UN R√îLE APPROPRI√â:\n";
echo "Choisissez le niveau d'acc√®s appropri√©:\n";
echo "1. Utilisateur standard (user)\n";
echo "2. √âditeur de contenu (editor)\n";
echo "3. Mod√©rateur (moderator)\n";
echo "4. Gestionnaire de projets (gestionnaire_projets)\n";
echo "5. Administrateur (admin)\n";
echo "6. Aucun r√¥le pour l'instant\n";

echo "Votre choix (1-6): ";
$handle = fopen("php://stdin", "r");
$choice = trim(fgets($handle));
fclose($handle);

$roleMap = [
    '1' => 'user',
    '2' => 'editor', 
    '3' => 'moderator',
    '4' => 'gestionnaire_projets',
    '5' => 'admin',
    '6' => null
];

if (isset($roleMap[$choice])) {
    if ($roleMap[$choice]) {
        $role = Role::where('name', $roleMap[$choice])->first();
        if ($role) {
            $user->assignRole($role);
            echo "   ‚úÖ R√¥le '{$roleMap[$choice]}' assign√©\n";
        } else {
            echo "   ‚ùå R√¥le '{$roleMap[$choice]}' non trouv√©\n";
        }
    } else {
        echo "   ‚úÖ Aucun r√¥le assign√©\n";
    }
} else {
    echo "   ‚ùå Choix invalide\n";
}

// 3. Gestion du statut du compte
echo "\nüîê GESTION DU STATUT DU COMPTE:\n";
echo "Le compte est actuellement: " . ($user->is_active ? 'ACTIF' : 'INACTIF') . "\n";

if (!$user->is_active) {
    if (askConfirmation("Activer le compte?")) {
        $user->is_active = true;
        $user->save();
        echo "   ‚úÖ Compte activ√©\n";
    } else {
        echo "   ‚è≠Ô∏è Compte rest√© inactif\n";
    }
} else {
    if (askConfirmation("D√©sactiver le compte par s√©curit√©?")) {
        $user->is_active = false;
        $user->save();
        echo "   ‚úÖ Compte d√©sactiv√©\n";
    } else {
        echo "   ‚è≠Ô∏è Compte rest√© actif\n";
    }
}

// 4. Gestion de la v√©rification email
echo "\nüìß V√âRIFICATION EMAIL:\n";
echo "Email v√©rifi√©: " . ($user->email_verified_at ? 'OUI' : 'NON') . "\n";

if (!$user->email_verified_at) {
    if (askConfirmation("Marquer l'email comme v√©rifi√©?")) {
        $user->email_verified_at = now();
        $user->save();
        echo "   ‚úÖ Email marqu√© comme v√©rifi√©\n";
    } else {
        echo "   ‚è≠Ô∏è Email rest√© non v√©rifi√©\n";
    }
}

// 5. R√©sum√© final
echo "\nüìã R√âSUM√â POST-CORRECTION:\n";
$user->refresh(); // Recharger les donn√©es

echo "  - R√¥les: " . $user->roles->count() . "\n";
foreach ($user->roles as $role) {
    echo "    ‚Ä¢ {$role->name}\n";
}

echo "  - Permissions directes: " . $user->permissions->count() . "\n";
echo "  - Total permissions via r√¥les: " . $user->getAllPermissions()->count() . "\n";
echo "  - Statut: " . ($user->is_active ? 'Actif' : 'Inactif') . "\n";
echo "  - Email v√©rifi√©: " . ($user->email_verified_at ? 'Oui' : 'Non') . "\n";

// 6. G√©n√©ration d'un log d'audit
echo "\nüìù G√âN√âRATION DU LOG D'AUDIT:\n";
$logEntry = [
    'timestamp' => now()->toISOString(),
    'user_id' => $user->id,
    'user_email' => $user->email,
    'action' => 'permission_audit_correction',
    'changes' => [
        'roles_after' => $user->roles->pluck('name')->toArray(),
        'direct_permissions_count' => $user->permissions->count(),
        'total_permissions_count' => $user->getAllPermissions()->count(),
        'account_active' => $user->is_active,
        'email_verified' => $user->email_verified_at ? true : false,
    ],
    'performed_by' => 'system_audit_script'
];

file_put_contents(
    'audit_log_sergyo_' . date('Y-m-d_H-i-s') . '.json',
    json_encode($logEntry, JSON_PRETTY_PRINT)
);

echo "‚úÖ Log d'audit sauvegard√©: audit_log_sergyo_" . date('Y-m-d_H-i-s') . ".json\n";

echo "\nüéØ RECOMMANDATIONS FINALES:\n";
echo "1. Surveiller l'activit√© de ce compte si activ√©\n";
echo "2. R√©viser p√©riodiquement les permissions\n";
echo "3. Documenter la justification m√©tier des acc√®s accord√©s\n";
echo "4. Impl√©menter un processus d'approbation pour les r√¥les sensibles\n";

echo "\n=== CORRECTION TERMIN√âE ===\n";
