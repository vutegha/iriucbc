<?php

require_once 'vendor/autoload.php';

// Bootstrap Laravel
$app = require_once 'bootstrap/app.php';
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

use App\Models\User;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

echo "=== CORRECTION GLOBALE DES PERMISSIONS - SYST√àME COMPLET ===\n\n";

// Fonction pour demander confirmation
function askConfirmation($message) {
    echo $message . " (y/N): ";
    $handle = fopen("php://stdin", "r");
    $line = fgets($handle);
    fclose($handle);
    return trim(strtolower($line)) === 'y';
}

// 1. R√©cup√©ration des utilisateurs probl√©matiques
$problematicUsers = User::with(['roles', 'permissions'])
    ->whereHas('permissions') // Users avec permissions directes
    ->orWhereHas('roles', function($query) {
        $query->havingRaw('COUNT(*) > 2'); // Users avec plus de 2 r√¥les
    })
    ->get();

echo "üîç UTILISATEURS PROBL√âMATIQUES IDENTIFI√âS: " . $problematicUsers->count() . "\n\n";

foreach ($problematicUsers as $user) {
    echo "üë§ {$user->name} ({$user->email})\n";
    echo "   R√¥les: " . $user->roles->count() . " (" . $user->roles->pluck('name')->implode(', ') . ")\n";
    echo "   Permissions directes: " . $user->permissions->count() . "\n";
    echo "   Email v√©rifi√©: " . ($user->email_verified_at ? 'Oui' : 'Non') . "\n";
    echo "   Statut: " . ($user->is_active ?? true ? 'Actif' : 'Inactif') . "\n\n";
}

if (!askConfirmation("Proc√©der √† la correction automatique?")) {
    echo "‚ùå Correction annul√©e par l'utilisateur.\n";
    exit;
}

$corrections = [];

// 2. PHASE 1: Suppression des permissions directes
echo "\nüßπ PHASE 1: SUPPRESSION DES PERMISSIONS DIRECTES\n";
$usersWithDirectPermissions = User::whereHas('permissions')->get();

foreach ($usersWithDirectPermissions as $user) {
    $permissionCount = $user->permissions->count();
    echo "  ‚Ä¢ {$user->name}: suppression de {$permissionCount} permissions directes... ";
    
    $user->permissions()->detach();
    echo "‚úÖ\n";
    
    $corrections[] = [
        'user_id' => $user->id,
        'action' => 'removed_direct_permissions',
        'count' => $permissionCount
    ];
}

// 3. PHASE 2: Simplification des r√¥les multiples
echo "\nüé≠ PHASE 2: SIMPLIFICATION DES R√îLES MULTIPLES\n";

// D√©finition des hi√©rarchies de r√¥les (du plus √©lev√© au plus bas)
$roleHierarchy = [
    'super-admin' => 6,
    'admin' => 5,
    'gestionnaire_projets' => 4,
    'moderator' => 3,
    'editor' => 2,
    'user' => 1
];

$usersWithMultipleRoles = User::whereHas('roles', function($query) {
    $query->havingRaw('COUNT(*) > 1');
})->with('roles')->get();

foreach ($usersWithMultipleRoles as $user) {
    $currentRoles = $user->roles->pluck('name')->toArray();
    echo "  ‚Ä¢ {$user->name}: r√¥les actuels [" . implode(', ', $currentRoles) . "]... ";
    
    // Trouver le r√¥le le plus √©lev√©
    $highestRole = null;
    $highestLevel = 0;
    
    foreach ($currentRoles as $roleName) {
        if (isset($roleHierarchy[$roleName]) && $roleHierarchy[$roleName] > $highestLevel) {
            $highestLevel = $roleHierarchy[$roleName];
            $highestRole = $roleName;
        }
    }
    
    if ($highestRole) {
        // Supprimer tous les r√¥les
        $user->roles()->detach();
        
        // Assigner uniquement le r√¥le le plus √©lev√©
        $user->assignRole($highestRole);
        echo "conserv√© uniquement '{$highestRole}' ‚úÖ\n";
        
        $corrections[] = [
            'user_id' => $user->id,
            'action' => 'simplified_roles',
            'from' => $currentRoles,
            'to' => $highestRole
        ];
    } else {
        echo "aucun r√¥le reconnu ‚ö†Ô∏è\n";
    }
}

// 4. PHASE 3: Gestion des comptes non v√©rifi√©s avec privil√®ges
echo "\nüìß PHASE 3: COMPTES ADMINISTRATEURS NON V√âRIFI√âS\n";

$unverifiedAdmins = User::whereNull('email_verified_at')
    ->whereHas('roles', function($query) {
        $query->whereIn('name', ['admin', 'super-admin', 'moderator']);
    })->get();

foreach ($unverifiedAdmins as $user) {
    echo "  ‚Ä¢ {$user->name} ({$user->email}): compte admin non v√©rifi√©\n";
    
    if (askConfirmation("    Suspendre les privil√®ges jusqu'√† v√©rification?")) {
        // Sauvegarder les r√¥les actuels
        $currentRoles = $user->roles->pluck('name')->toArray();
        
        // Retirer tous les r√¥les privil√©gi√©s
        $user->roles()->detach();
        
        // Assigner uniquement le r√¥le user
        $user->assignRole('user');
        
        echo "    ‚úÖ Privil√®ges suspendus, r√¥le 'user' assign√©\n";
        
        $corrections[] = [
            'user_id' => $user->id,
            'action' => 'suspended_unverified_admin',
            'suspended_roles' => $currentRoles
        ];
    } else {
        echo "    ‚è≠Ô∏è Ignor√©\n";
    }
}

// 5. PHASE 4: Audit des comptes inactifs
echo "\nüîí PHASE 4: NETTOYAGE DES COMPTES INACTIFS\n";

// V√©rifier si la colonne is_active existe
$hasActiveColumn = Schema::hasColumn('users', 'is_active');

if ($hasActiveColumn) {
    $inactiveUsersWithPermissions = User::where('is_active', false)
        ->where(function($query) {
            $query->whereHas('roles')->orWhereHas('permissions');
        })->get();
    
    foreach ($inactiveUsersWithPermissions as $user) {
        echo "  ‚Ä¢ {$user->name}: compte inactif avec permissions... ";
        
        $user->roles()->detach();
        $user->permissions()->detach();
        echo "‚úÖ permissions supprim√©es\n";
        
        $corrections[] = [
            'user_id' => $user->id,
            'action' => 'cleaned_inactive_account'
        ];
    }
} else {
    echo "  ‚ö†Ô∏è Colonne 'is_active' non trouv√©e, phase ignor√©e\n";
}

// 6. G√âN√âRATION DU RAPPORT DE CORRECTION
echo "\nüìã G√âN√âRATION DU RAPPORT DE CORRECTION\n";

$report = [
    'correction_date' => now()->toISOString(),
    'total_corrections' => count($corrections),
    'corrections_by_type' => [],
    'detailed_corrections' => $corrections
];

// Grouper par type de correction
foreach ($corrections as $correction) {
    $type = $correction['action'];
    if (!isset($report['corrections_by_type'][$type])) {
        $report['corrections_by_type'][$type] = 0;
    }
    $report['corrections_by_type'][$type]++;
}

$reportFile = 'correction_globale_permissions_' . date('Y-m-d_H-i-s') . '.json';
file_put_contents($reportFile, json_encode($report, JSON_PRETTY_PRINT));

echo "‚úÖ Rapport de correction sauvegard√©: {$reportFile}\n";

// 7. √âTAT FINAL DU SYST√àME
echo "\nüéØ √âTAT FINAL DU SYST√àME\n";

$finalStats = [
    'total_users' => User::count(),
    'users_with_direct_permissions' => User::whereHas('permissions')->count(),
    'users_with_multiple_roles' => User::whereHas('roles', function($query) {
        $query->havingRaw('COUNT(*) > 1');
    })->count(),
    'unverified_admins' => User::whereNull('email_verified_at')
        ->whereHas('roles', function($query) {
            $query->whereIn('name', ['admin', 'super-admin']);
        })->count()
];

echo "‚Ä¢ Utilisateurs total: {$finalStats['total_users']}\n";
echo "‚Ä¢ Avec permissions directes: {$finalStats['users_with_direct_permissions']}\n";
echo "‚Ä¢ Avec r√¥les multiples: {$finalStats['users_with_multiple_roles']}\n";
echo "‚Ä¢ Admins non v√©rifi√©s: {$finalStats['unverified_admins']}\n";

// 8. RECOMMANDATIONS POST-CORRECTION
echo "\nüõ°Ô∏è RECOMMANDATIONS POST-CORRECTION\n";
echo "1. Ex√©cuter un nouvel audit global pour v√©rifier les corrections\n";
echo "2. Impl√©menter un syst√®me de logging des changements de permissions\n";
echo "3. Cr√©er un processus d'approbation pour les r√¥les sensibles\n";
echo "4. Planifier des audits p√©riodiques (mensuel recommand√©)\n";
echo "5. Former les administrateurs sur les bonnes pratiques de s√©curit√©\n";

echo "\n‚úÖ CORRECTION GLOBALE TERMIN√âE\n";
echo "üìÅ Fichiers g√©n√©r√©s:\n";
echo "   - {$reportFile}\n";
echo "   - audit_global_permissions_*.json (audit pr√©c√©dent)\n";

echo "\nüîÑ COMMANDE POUR V√âRIFICATION:\n";
echo "php audit_global_permissions.php\n";
