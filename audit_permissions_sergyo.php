<?php

require_once 'vendor/autoload.php';

// Bootstrap Laravel
$app = require_once 'bootstrap/app.php';
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

use App\Models\User;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

echo "=== AUDIT DES PERMISSIONS POUR sergyo.vutegha@gmail.com ===\n\n";

// 1. V√©rifier l'existence de l'utilisateur
$user = User::where('email', 'sergyo.vutegha@gmail.com')->first();

if (!$user) {
    echo "‚ùå UTILISATEUR NON TROUV√â\n";
    echo "L'email sergyo.vutegha@gmail.com n'existe pas dans la base de donn√©es.\n\n";
    
    // Afficher tous les utilisateurs existants
    echo "üìã UTILISATEURS EXISTANTS :\n";
    $users = User::all();
    foreach ($users as $u) {
        echo "  - {$u->name} ({$u->email}) - " . ($u->is_active ? 'Actif' : 'Inactif') . "\n";
    }
    exit;
}

echo "‚úÖ UTILISATEUR TROUV√â\n";
echo "Nom: {$user->name}\n";
echo "Email: {$user->email}\n";
echo "ID: {$user->id}\n";
echo "Statut: " . ($user->is_active ? 'Actif' : 'Inactif') . "\n";
echo "Email v√©rifi√©: " . ($user->email_verified_at ? 'Oui (' . $user->email_verified_at . ')' : 'Non') . "\n";
echo "Cr√©√© le: {$user->created_at}\n";
echo "Derni√®re mise √† jour: {$user->updated_at}\n\n";

// 2. V√©rifier les r√¥les assign√©s
echo "üîë R√îLES ASSIGN√âS :\n";
$roles = $user->roles;
if ($roles->count() > 0) {
    foreach ($roles as $role) {
        echo "  - {$role->name} (Garde: {$role->guard_name})\n";
    }
} else {
    echo "  ‚ùå Aucun r√¥le assign√©\n";
}
echo "\n";

// 3. V√©rifier les permissions directes
echo "üõ°Ô∏è PERMISSIONS DIRECTES :\n";
$directPermissions = $user->permissions;
if ($directPermissions->count() > 0) {
    foreach ($directPermissions as $permission) {
        echo "  - {$permission->name} (Garde: {$permission->guard_name})\n";
    }
} else {
    echo "  ‚ö†Ô∏è Aucune permission directe\n";
}
echo "\n";

// 4. V√©rifier toutes les permissions (r√¥les + directes)
echo "üîê TOUTES LES PERMISSIONS (via r√¥les + directes) :\n";
$allPermissions = $user->getAllPermissions();
if ($allPermissions->count() > 0) {
    $groupedPermissions = [];
    foreach ($allPermissions as $permission) {
        $parts = explode(' ', $permission->name);
        $action = $parts[0] ?? 'other';
        $resource = $parts[1] ?? 'general';
        
        if (!isset($groupedPermissions[$resource])) {
            $groupedPermissions[$resource] = [];
        }
        $groupedPermissions[$resource][] = $action;
    }
    
    foreach ($groupedPermissions as $resource => $actions) {
        echo "  üìÅ {$resource}:\n";
        foreach ($actions as $action) {
            echo "    ‚úì {$action}\n";
        }
    }
} else {
    echo "  ‚ùå Aucune permission\n";
}
echo "\n";

// 5. Tester des permissions sp√©cifiques importantes
echo "üß™ TEST DE PERMISSIONS CRITIQUES :\n";
$criticalPermissions = [
    'view admin',
    'manage users',
    'create users',
    'update users',
    'delete users',
    'view evenements',
    'create evenements',
    'update evenements',
    'delete evenements',
    'moderate evenements',
    'publish evenements',
    'view services',
    'create services',
    'update services',
    'delete services',
    'view projets',
    'create projets',
    'update projets',
    'delete projets',
    'view actualites',
    'create actualites',
    'update actualites',
    'delete actualites',
    'moderate actualites',
    'publish actualites',
];

foreach ($criticalPermissions as $permission) {
    $hasPermission = $user->can($permission);
    $status = $hasPermission ? '‚úÖ' : '‚ùå';
    echo "  {$status} {$permission}\n";
}
echo "\n";

// 6. V√©rifier les restrictions sp√©cifiques
echo "üö´ V√âRIFICATION DES RESTRICTIONS :\n";
echo "  - Compte actif: " . ($user->is_active ? '‚úÖ Oui' : '‚ùå Non') . "\n";
echo "  - Email v√©rifi√©: " . ($user->email_verified_at ? '‚úÖ Oui' : '‚ùå Non') . "\n";

// V√©rifier s'il y a des restrictions de connexion
if (method_exists($user, 'login_attempts')) {
    echo "  - Tentatives de connexion: {$user->login_attempts}\n";
}

if (method_exists($user, 'locked_until')) {
    echo "  - Verrouill√© jusqu'√†: " . ($user->locked_until ? $user->locked_until : 'Non verrouill√©') . "\n";
}

// 7. Informations sur la structure des permissions
echo "\nüìä STATISTIQUES DU SYST√àME DE PERMISSIONS :\n";
echo "  - Total des r√¥les: " . Role::count() . "\n";
echo "  - Total des permissions: " . Permission::count() . "\n";
echo "  - Total des utilisateurs: " . User::count() . "\n";

// 8. Lister tous les r√¥les disponibles
echo "\nüé≠ R√îLES DISPONIBLES DANS LE SYST√àME :\n";
$allRoles = Role::all();
foreach ($allRoles as $role) {
    $permCount = $role->permissions->count();
    echo "  - {$role->name} ({$permCount} permissions)\n";
}

// 9. Recommandations de s√©curit√©
echo "\nüí° RECOMMANDATIONS DE S√âCURIT√â :\n";

if (!$user->is_active) {
    echo "  ‚ö†Ô∏è  Compte inactif - L'utilisateur ne peut pas se connecter\n";
}

if (!$user->email_verified_at) {
    echo "  ‚ö†Ô∏è  Email non v√©rifi√© - Fonctionnalit√©s limit√©es possibles\n";
}

if ($roles->count() === 0 && $directPermissions->count() === 0) {
    echo "  üö® CRITIQUE: Aucune permission assign√©e - L'utilisateur ne peut rien faire\n";
}

if ($user->can('manage users') || $user->can('view admin')) {
    echo "  ‚ö†Ô∏è  Acc√®s administrateur d√©tect√© - Surveiller l'activit√©\n";
}

echo "\n=== FIN DE L'AUDIT ===\n";
