<?php

/**
 * Script de diagnostic pour les probl√®mes d'upload de fichier
 */

require_once 'vendor/autoload.php';

// Bootstrap Laravel
$app = require_once 'bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

echo "=== DIAGNOSTIC UPLOAD FICHIER ===\n\n";

// 1. V√©rifier les permissions des dossiers
echo "1. V√©rification des permissions...\n";

$directories = [
    'storage/app' => storage_path('app'),
    'storage/app/public' => storage_path('app/public'),
    'storage/app/public/assets' => storage_path('app/public/assets'),
    'public/storage' => public_path('storage'),
];

foreach ($directories as $name => $path) {
    echo "   $name: ";
    
    if (!file_exists($path)) {
        echo "‚ùå N'existe pas\n";
        echo "      Tentative de cr√©ation...\n";
        if (mkdir($path, 0755, true)) {
            echo "      ‚úÖ Cr√©√© avec succ√®s\n";
        } else {
            echo "      ‚ùå √âchec de cr√©ation\n";
        }
    } else {
        echo "‚úÖ Existe";
        
        if (is_writable($path)) {
            echo " - ‚úÖ Accessible en √©criture";
        } else {
            echo " - ‚ùå PAS accessible en √©criture";
        }
        
        if (is_dir($path)) {
            echo " - ‚úÖ Dossier";
        } elseif (is_link($path)) {
            echo " - üîó Lien symbolique";
            $target = readlink($path);
            echo " -> $target";
            if (file_exists($target)) {
                echo " (‚úÖ Cible existe)";
            } else {
                echo " (‚ùå Cible manquante)";
            }
        }
        echo "\n";
    }
}

// 2. V√©rifier la configuration PHP
echo "\n2. Configuration PHP pour les uploads...\n";

$configs = [
    'file_uploads' => ini_get('file_uploads') ? 'Activ√©' : 'D√©sactiv√©',
    'upload_max_filesize' => ini_get('upload_max_filesize'),
    'post_max_size' => ini_get('post_max_size'),
    'max_execution_time' => ini_get('max_execution_time') . 's',
    'memory_limit' => ini_get('memory_limit'),
    'upload_tmp_dir' => ini_get('upload_tmp_dir') ?: 'D√©faut syst√®me',
];

foreach ($configs as $key => $value) {
    echo "   $key: $value\n";
}

// 3. V√©rifier le dossier temporaire
echo "\n3. Dossier temporaire...\n";
$tmpDir = sys_get_temp_dir();
echo "   Dossier temp: $tmpDir\n";
echo "   Accessible en √©criture: " . (is_writable($tmpDir) ? "‚úÖ Oui" : "‚ùå Non") . "\n";

// 4. Test d'√©criture
echo "\n4. Test d'√©criture dans storage/app/public/assets...\n";
$testPath = storage_path('app/public/assets');

if (!is_dir($testPath)) {
    mkdir($testPath, 0755, true);
}

$testFile = $testPath . '/test_write.txt';
$testContent = 'Test d\'√©criture - ' . date('Y-m-d H:i:s');

try {
    if (file_put_contents($testFile, $testContent) !== false) {
        echo "   ‚úÖ √âcriture r√©ussie\n";
        
        if (file_get_contents($testFile) === $testContent) {
            echo "   ‚úÖ Lecture r√©ussie\n";
        } else {
            echo "   ‚ùå Lecture √©chou√©e\n";
        }
        
        if (unlink($testFile)) {
            echo "   ‚úÖ Suppression r√©ussie\n";
        } else {
            echo "   ‚ùå Suppression √©chou√©e\n";
        }
    } else {
        echo "   ‚ùå √âcriture √©chou√©e\n";
    }
} catch (Exception $e) {
    echo "   ‚ùå Erreur: " . $e->getMessage() . "\n";
}

// 5. V√©rifier l'espace disque
echo "\n5. Espace disque...\n";
$freeBytes = disk_free_space(storage_path());
$totalBytes = disk_total_space(storage_path());

if ($freeBytes !== false && $totalBytes !== false) {
    $freeMB = round($freeBytes / 1024 / 1024, 2);
    $totalMB = round($totalBytes / 1024 / 1024, 2);
    $usedPercent = round((($totalBytes - $freeBytes) / $totalBytes) * 100, 2);
    
    echo "   Libre: {$freeMB} MB\n";
    echo "   Total: {$totalMB} MB\n";
    echo "   Utilis√©: {$usedPercent}%\n";
    
    if ($freeMB < 100) {
        echo "   ‚ö†Ô∏è  Espace disque faible!\n";
    } else {
        echo "   ‚úÖ Espace disque suffisant\n";
    }
} else {
    echo "   ‚ùå Impossible de d√©terminer l'espace disque\n";
}

// 6. Test de simulation d'upload
echo "\n6. Configuration Laravel...\n";

try {
    $disk = \Illuminate\Support\Facades\Storage::disk('public');
    echo "   Disque 'public': ‚úÖ Configur√©\n";
    echo "   Chemin root: " . $disk->path('') . "\n";
    
    // Test d'√©criture avec Storage
    $testContent = 'Test Laravel Storage - ' . time();
    if ($disk->put('test_storage.txt', $testContent)) {
        echo "   ‚úÖ √âcriture Storage r√©ussie\n";
        
        if ($disk->get('test_storage.txt') === $testContent) {
            echo "   ‚úÖ Lecture Storage r√©ussie\n";
        } else {
            echo "   ‚ùå Lecture Storage √©chou√©e\n";
        }
        
        if ($disk->delete('test_storage.txt')) {
            echo "   ‚úÖ Suppression Storage r√©ussie\n";
        } else {
            echo "   ‚ùå Suppression Storage √©chou√©e\n";
        }
    } else {
        echo "   ‚ùå √âcriture Storage √©chou√©e\n";
    }
    
} catch (Exception $e) {
    echo "   ‚ùå Erreur Storage: " . $e->getMessage() . "\n";
}

echo "\n=== RECOMMANDATIONS ===\n";

// Recommandations bas√©es sur les tests
if (!is_writable(storage_path('app/public/assets'))) {
    echo "‚ö†Ô∏è  Corriger les permissions du dossier storage/app/public/assets\n";
    echo "   Commande: chmod -R 755 " . storage_path('app/public') . "\n";
}

if (ini_get('file_uploads') != 1) {
    echo "‚ö†Ô∏è  Activer file_uploads dans php.ini\n";
}

$maxUpload = ini_get('upload_max_filesize');
if (strpos($maxUpload, 'M') !== false && (int)$maxUpload < 50) {
    echo "‚ö†Ô∏è  Augmenter upload_max_filesize dans php.ini (actuellement: $maxUpload)\n";
}

echo "\nüéØ Diagnostic termin√©!\n";
