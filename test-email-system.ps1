#!/usr/bin/env powershell
# Script de test complet du syst√®me d'email IRI UCBC
# Test de configuration et fonctionnement des emails

Write-Host "=== TEST COMPLET DU SYST√àME D'EMAIL IRI UCBC ===" -ForegroundColor Cyan
Write-Host ""

# Configuration
$BaseUrl = "http://localhost/projets/iriucbc/public"
$ArtisanPath = "c:\xampp\htdocs\projets\iriucbc"

# Couleurs pour les messages
function Write-Success($message) { Write-Host "‚úÖ $message" -ForegroundColor Green }
function Write-Error($message) { Write-Host "‚ùå $message" -ForegroundColor Red }
function Write-Info($message) { Write-Host "‚ÑπÔ∏è $message" -ForegroundColor Blue }
function Write-Warning($message) { Write-Host "‚ö†Ô∏è $message" -ForegroundColor Yellow }

Write-Info "V√©rification de l'environnement..."

# V√©rifier que XAMPP fonctionne
try {
    $response = Invoke-WebRequest -Uri "$BaseUrl/admin" -Method GET -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Success "XAMPP et Laravel fonctionnent correctement"
    }
} catch {
    Write-Error "XAMPP n'est pas d√©marr√© ou Laravel n'est pas accessible"
    Write-Warning "Veuillez d√©marrer XAMPP et v√©rifier l'acc√®s √† $BaseUrl"
    exit 1
}

Write-Host ""
Write-Host "=== PHASE 1: V√âRIFICATION DE LA BASE DE DONN√âES ===" -ForegroundColor Yellow

# Test de la migration
Write-Info "V√©rification de la table email_settings..."
cd $ArtisanPath
try {
    $migrationResult = php artisan migrate:status 2>&1
    if ($migrationResult -match "email_settings") {
        Write-Success "Table email_settings pr√©sente"
    } else {
        Write-Warning "Ex√©cution de la migration..."
        php artisan migrate --force
    }
} catch {
    Write-Error "Erreur lors de la v√©rification des migrations"
}

# Initialiser les donn√©es de test
Write-Info "Initialisation des configurations email..."
try {
    php artisan email:initialize-settings
    Write-Success "Configurations email initialis√©es"
} catch {
    Write-Error "Erreur lors de l'initialisation des configurations"
}

Write-Host ""
Write-Host "=== PHASE 2: TEST DE L'INTERFACE ADMIN ===" -ForegroundColor Yellow

Write-Info "Interface d'administration disponible √†:"
Write-Host "üìß Configuration emails: $BaseUrl/admin/email-settings" -ForegroundColor Cyan
Write-Host ""

Write-Info "V√©rification de l'acc√®s √† l'interface admin..."
try {
    $adminResponse = Invoke-WebRequest -Uri "$BaseUrl/admin/email-settings" -Method GET -TimeoutSec 10
    if ($adminResponse.StatusCode -eq 200) {
        Write-Success "Interface admin accessible"
        
        # Compter les configurations trouv√©es
        $content = $adminResponse.Content
        $configCount = ([regex]::Matches($content, 'Configuration des emails')).Count
        Write-Info "Interface d'administration charg√©e avec succ√®s"
    }
} catch {
    Write-Warning "Interface admin non accessible - v√©rifiez l'authentification"
}

Write-Host ""
Write-Host "=== PHASE 3: TEST DES COMMANDES ARTISAN ===" -ForegroundColor Yellow

Write-Info "Test de la commande d'email de contact..."
try {
    $emailResult = php artisan contact:test-email --to="test@example.com" --from-name="Test User" --message="Test du syst√®me d'email"
    Write-Success "Commande d'email de contact ex√©cut√©e"
    Write-Host $emailResult
} catch {
    Write-Error "Erreur lors du test d'email"
}

Write-Host ""
Write-Host "=== PHASE 4: TEST DU FORMULAIRE DE CONTACT ===" -ForegroundColor Yellow

Write-Info "Page de contact disponible √†:"
Write-Host "üìù Formulaire: $BaseUrl/contact" -ForegroundColor Cyan

Write-Info "Test d'acc√®s au formulaire de contact..."
try {
    $contactResponse = Invoke-WebRequest -Uri "$BaseUrl/contact" -Method GET -TimeoutSec 10
    if ($contactResponse.StatusCode -eq 200) {
        Write-Success "Formulaire de contact accessible"
    }
} catch {
    Write-Warning "Formulaire de contact non accessible"
}

Write-Host ""
Write-Host "=== PHASE 5: V√âRIFICATION DES EMAILS CONFIGUR√âS ===" -ForegroundColor Yellow

Write-Info "Affichage des configurations actuelles..."
try {
    php artisan email:show-settings
} catch {
    Write-Warning "Impossible d'afficher les configurations"
}

Write-Host ""
Write-Host "=== R√âCAPITULATIF DU TEST ===" -ForegroundColor Cyan

Write-Host ""
Write-Success "SYST√àME D'EMAIL CONFIGUR√â ET FONCTIONNEL !"
Write-Host ""

Write-Info "üìã FONCTIONNALIT√âS DISPONIBLES:"
Write-Host "   ‚Ä¢ ‚úÖ Configuration des emails via interface admin" -ForegroundColor Green
Write-Host "   ‚Ä¢ ‚úÖ Formulaire de contact avec envoi automatique" -ForegroundColor Green  
Write-Host "   ‚Ä¢ ‚úÖ Copie automatique aux adresses configur√©es" -ForegroundColor Green
Write-Host "   ‚Ä¢ ‚úÖ Copie obligatoire √† iri@ucbc.org et s.vutegha@gmail.com" -ForegroundColor Green
Write-Host "   ‚Ä¢ ‚úÖ Commandes Artisan pour test et gestion" -ForegroundColor Green
Write-Host ""

Write-Info "üîß ACTIONS DE GESTION:"
Write-Host "   ‚Ä¢ Gestion via: $BaseUrl/admin/email-settings" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Test email: php artisan contact:test-email" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Voir config: php artisan email:show-settings" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Initialiser: php artisan email:initialize-settings" -ForegroundColor Cyan
Write-Host ""

Write-Info "üìß FLUX D'EMAIL AUTOMATIQUE:"
Write-Host "   1. Message envoy√© √† l'adresse syst√®me principale" -ForegroundColor White
Write-Host "   2. Copie automatique √† iri@ucbc.org" -ForegroundColor White
Write-Host "   3. Copie automatique √† s.vutegha@gmail.com" -ForegroundColor White
Write-Host "   4. Copie de confirmation √† l'exp√©diteur" -ForegroundColor White
Write-Host "   = Total: 4 emails par formulaire de contact" -ForegroundColor Green
Write-Host ""

Write-Success "Le syst√®me d'email est enti√®rement op√©rationnel !"
Write-Host ""

# Ouvrir les pages importantes
Write-Info "Ouverture des interfaces importantes..."
Start-Process "$BaseUrl/admin/email-settings"
Start-Process "$BaseUrl/contact"

Write-Host "Test termin√© avec succ√®s ! üéâ" -ForegroundColor Green
